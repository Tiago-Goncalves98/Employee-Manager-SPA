{
  "version": 3,
  "sources": ["../../../../../node_modules/easy-file-picker/index.js"],
  "sourcesContent": ["export async function getFile(options) {\n    const fileInput = createFileInput(false, options);\n    const file = new Promise((resolve) => {\n        fileInput.onchange = (event) => {\n            const files = convertFileListToFileArray(event.target?.files);\n            resolve(files[0]);\n        };\n        fileInput.click();\n    });\n    return file.finally(() => fileInput.remove());\n}\nexport async function getFiles(options) {\n    const fileInput = createFileInput(true, options);\n    const files = new Promise((resolve) => {\n        fileInput.onchange = (event) => {\n            const files = convertFileListToFileArray(event.target?.files);\n            resolve(files);\n        };\n        fileInput.click();\n    });\n    return files.finally(() => fileInput.remove());\n}\nexport async function getFileAsString(options) {\n    const fileInput = createFileInput(false, options);\n    const file = new Promise((resolve, reject) => {\n        fileInput.onchange = (event) => {\n            const files = convertFileListToFileArray(event.target?.files);\n            convertFileArrayToFileStringArray(files)\n                .then((str) => resolve(str[0]))\n                .catch((err) => reject(err));\n        };\n        fileInput.click();\n    });\n    return file.finally(() => fileInput.remove());\n}\nexport async function getFilesAsString(options) {\n    const fileInput = createFileInput(false, options);\n    const files = new Promise((resolve, reject) => {\n        fileInput.onchange = (event) => {\n            const files = convertFileListToFileArray(event.target?.files);\n            convertFileArrayToFileStringArray(files)\n                .then((str) => resolve(str))\n                .catch((err) => reject(err));\n        };\n        fileInput.click();\n    });\n    return files.finally(() => fileInput.remove());\n}\nexport async function uploadFilesTo(url, files) {\n    const filesArray = Array.isArray(files) ? files : [files];\n    const formData = new FormData();\n    let i = 0;\n    for (const file of filesArray) {\n        formData.append(`File${i++}`, file, file.name);\n    }\n    return fetch(url, {\n        method: \"POST\",\n        body: formData,\n    });\n}\nfunction createFileInput(multpleFiles, options) {\n    const fileInput = document.createElement(\"input\");\n    fileInput.hidden = true;\n    fileInput.type = \"file\";\n    fileInput.multiple = multpleFiles;\n    fileInput.accept = options?.acceptedExtensions?.join(\",\") ?? \"\";\n    return fileInput;\n}\nfunction convertFileListToFileArray(files) {\n    if (files == null) {\n        return [];\n    }\n    const fileArray = [];\n    for (let i = 0; i < files.length; i++) {\n        fileArray.push(files[i]);\n    }\n    return fileArray;\n}\nasync function convertFileArrayToFileStringArray(files) {\n    const reader = new FileReader();\n    const filePromises = [];\n    for (const file of files) {\n        const filePromise = new Promise((resolve) => {\n            reader.onload = (event) => {\n                resolve({\n                    name: file.name,\n                    size: file.size,\n                    type: file.type,\n                    lastModified: file.lastModified,\n                    webkitRelativePath: file.webkitRelativePath,\n                    content: event.target?.result,\n                });\n            };\n            reader.readAsText(file, \"utf-8\");\n        });\n        filePromises.push(filePromise);\n    }\n    return Promise.all(filePromises);\n}\n"],
  "mappings": "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",
  "names": ["files"]
}
